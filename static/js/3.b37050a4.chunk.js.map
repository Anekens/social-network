{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/Contacts.js","components/Profile/ProfileInfo/ProfileDataUser.js","components/Profile/ProfileInfo/ProfileDataForm.js","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddNewPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","style","backgroundColor","value","onBlur","updateStatus","autoFocus","onChange","e","currentTarget","Contacts","contactTitle","contactValue","className","s","contact","ProfileDataUser","isOwner","onClick","goToEditMode","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","error","formSummaryError","createField","Input","type","Textarea","ProfileInfo","Preloader","descriptionBlock","mainPhoto","alt","src","photos","large","userPhoto","target","files","length","savePhoto","formData","saveProfile","then","initialValues","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","validate","required","placeholder","MyPosts","React","memo","postsElements","posts","p","id","likeCount","postBlocks","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","match","params","userId","ProfileContainer","this","authorizedUserId","history","push","getUsersProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,iBAAmB,sCAAsC,UAAY,+BAA+B,QAAU,+B,oBCAnKD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,sIC+CVC,EA7CgB,SAACC,GAAW,IAAD,EAENC,oBAAS,GAFH,mBAE/BC,EAF+B,KAErBC,EAFqB,OAGVF,mBAASD,EAAMI,QAHL,mBAG/BA,EAH+B,KAGvBC,EAHuB,KAKtCC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAgBV,OACI,8BACMF,GACF,6BACO,uCADP,IACuB,0BAAMK,cAjBZ,WACrBJ,GAAY,IAiBMK,MAAO,CAACC,gBAAiB,YAC1BT,EAAMI,QAAU,cAI5BF,GACD,6BACI,2BAAOQ,MAAON,EACPO,OAtBQ,WACvBR,GAAY,GACZH,EAAMY,aAAaR,IAqBJS,WAAW,EACXC,SAnBI,SAACC,GACpBV,EAAUU,EAAEC,cAAcN,a,iBCXnBO,EARE,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKC,UAAWC,IAAEC,SACd,2BAAIJ,GADR,KAC4BC,IC2BrBI,EA9BS,SAACvB,GACrB,OACI,6BACKA,EAAMwB,SAAW,6BACd,4BAAQC,QAASzB,EAAM0B,cAAvB,SAEJ,6BACI,0CAAmB1B,EAAM2B,QAAQC,UAErC,6BACI,kDAA2B5B,EAAM2B,QAAQE,eAAiB,MAAQ,MAErE7B,EAAM2B,QAAQE,gBACf,6BACI,uDAAgC7B,EAAM2B,QAAQG,2BAElD,6BACI,yCAAkB9B,EAAM2B,QAAQI,SAEpC,6BACI,yCAAkBC,OAAOC,KAAKjC,EAAM2B,QAAQO,UAAUC,KAAI,SAAAC,GAC1D,OAAO,kBAAC,EAAD,CAAUlB,aAAckB,EACdjB,aAAc,CAACnB,EAAM2B,QAAQO,SAASE,IACtCA,IAAKA,U,kCCyBvBC,EAFkBC,YAAU,CAACC,KAAM,gBAAjBD,EA3CT,SAACtC,GACrB,OACI,0BAAMwC,SAAUxC,EAAMyC,cAClB,6BACI,yCAEHzC,EAAM0C,OACP,yBAAKtB,UAAWL,IAAE4B,kBACb3C,EAAM0C,OAGX,6BACI,wCADJ,IAEKE,YAAY,YAAa,WAAY,GAAIC,MAE9C,6BACI,gDADJ,IAEKD,YAAY,GAAI,iBAAkB,GAAIC,IACnC,CAACC,KAAM,cAEf,6BACI,qDADJ,IAEKF,YAAY,yBAA0B,4BAA6B,GAAIG,MAE5E,6BACI,uCADJ,IAEKH,YAAY,WAAY,UAAW,GAAIG,MAE5C,6BACI,yCAAkBf,OAAOC,KAAKjC,EAAM2B,QAAQO,UAAUC,KAAI,SAAAC,GAC1D,OACI,yBAAKA,IAAKA,EAAKhB,UAAWC,IAAEC,SACxB,2BAAIc,EAAJ,IACKQ,YAAYR,EAAK,YAAcA,EAC5B,GAAIS,eCiBrBG,EAjDK,SAAChD,GAAY,IAAD,EAEIC,oBAAS,GAFb,mBAErBC,EAFqB,KAEXC,EAFW,KAQ5B,IAAKH,EAAM2B,QACP,OAAO,kBAACsB,EAAA,EAAD,MAiBX,OACI,6BACI,yBAAK7B,UAAWC,IAAE6B,kBACd,yBAAK9B,UAAWC,IAAE8B,UACbC,IAAK,SACLC,IAAKrD,EAAM2B,QAAQ2B,OAAOC,OAASC,MACvCxD,EAAMwB,SAAW,2BAAOsB,KAAM,OAAQhC,SApBvB,SAACC,GACrBA,EAAE0C,OAAOC,MAAMC,QACf3D,EAAM4D,UAAU7C,EAAE0C,OAAOC,MAAM,OAoB3B,kBAAC,EAAD,CAAwBtD,OAAQJ,EAAMI,OACdQ,aAAcZ,EAAMY,eAC5C,4CACCV,EACK,kBAAC,EAAD,CAAiByB,QAAS3B,EAAM2B,QACfa,SArBlB,SAACqB,GACd7D,EAAM8D,YAAYD,GAAUE,MACxB,WACI5D,GAAY,OAmBW6D,cAAehE,EAAM2B,UACtC,kBAAC,EAAD,CAAiBA,QAAS3B,EAAM2B,QACfH,QAASxB,EAAMwB,QACfE,aAvCd,WACjBvB,GAAY,S,4CCKL8D,EAfF,SAACjE,GACV,OACI,yBAAKoB,UAAWC,IAAE6C,MACd,yBAAKb,IAAI,4EAA4ED,IAAI,KACxFpD,EAAMmE,QACP,6BACI,sCACCnE,EAAMoE,c,gBCNjBC,EAAcC,YAAiB,IAoBtBC,EAFajC,YAAU,CAACC,KAAM,yBAAjBD,EAhBL,SAACtC,GACpB,OACI,0BAAMwC,SAAUxC,EAAMyC,cAClB,6BACI,kBAAC+B,EAAA,EAAD,CAAOC,KAAM,cACNC,UAAW3B,IACX4B,SAAU,CAACC,IAAUP,GACrBQ,YAAa,kBAExB,6BACI,iDCSDC,EArBCC,IAAMC,MAAK,SAAChF,GAExB,IAAMiF,EAAgBjF,EAAMkF,MACvB/C,KAAI,SAAAgD,GAAC,OAAI,kBAAC,EAAD,CAAM/C,IAAK+C,EAAEC,GAAIjB,QAASgB,EAAEhB,QAASC,WAAYe,EAAEE,eAMjE,OACI,yBAAKjE,UAAWC,IAAEiE,YACd,wCACA,kBAAC,EAAD,CAAqB9C,SAPX,SAAC+C,GACfvF,EAAMwF,QAAQD,EAAOE,gBAOjB,yBAAKrE,UAAWC,IAAE6D,OACbD,O,QCGFS,EAFUC,aAfD,SAACC,GACrB,MAAO,CACHV,MAAOU,EAAMC,YAAYX,MACzBO,YAAaG,EAAMC,YAAYJ,gBAIZ,SAACK,GACxB,MAAO,CACHN,QAAS,SAACC,GACNK,EAASC,YAAqBN,QAKjBE,CAA6Cb,GCDvDkB,EAdC,SAAChG,GACb,OACI,6BACI,kBAAC,EAAD,CAAawB,SAAUxB,EAAMiG,MAAMC,OAAOC,OAC7BxE,QAAS3B,EAAM2B,QACfvB,OAAQJ,EAAMI,OACdQ,aAAcZ,EAAMY,aACpBgD,UAAW5D,EAAM4D,UACjBE,YAAa9D,EAAM8D,cAChC,kBAAC,EAAD,Q,eCNNsC,E,yLAGE,IAAID,EAASE,KAAKrG,MAAMiG,MAAMC,OAAOC,OAChCA,IACDA,EAASE,KAAKrG,MAAMsG,mBAEhBD,KAAKrG,MAAMuG,QAAQC,KAAK,UAGhCH,KAAKrG,MAAMyG,gBAAgBN,GAC3BE,KAAKrG,MAAM0G,UAAUP,K,0CAIrBE,KAAKM,mB,yCAGUC,EAAWC,EAAWC,GACjCT,KAAKrG,MAAMiG,MAAMC,OAAOC,SAAWS,EAAUX,MAAMC,OAAOC,QAC1DE,KAAKM,mB,+BAKT,OACI,kBAAC,EAAD,iBAAaN,KAAKrG,MAAlB,CACSwB,UAAW6E,KAAKrG,MAAMiG,MAAMC,OAAOC,OACnCxE,QAAS0E,KAAKrG,MAAM2B,QACpBvB,OAAQiG,KAAKrG,MAAMI,OACnBQ,aAAcyF,KAAKrG,MAAMY,aACzBgD,UAAWyC,KAAKrG,MAAM4D,iB,GA/BZmB,IAAMgC,WA2CtBC,sBACXrB,aARoB,SAACC,GAAD,MAAY,CAChCjE,QAASiE,EAAMC,YAAYlE,QAC3BvB,OAAQwF,EAAMC,YAAYzF,OAC1BkG,iBAAkBV,EAAMqB,KAAKd,OAC7Be,OAAQtB,EAAMqB,KAAKC,UAIM,CAACT,oBAAiBC,cAAW9F,iBAAcgD,cAAWE,kBAC/EqD,IAFWH,CAGbZ","file":"static/js/3.b37050a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"ProfileInfo_image__2Z2uy\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3tO9r\",\"mainPhoto\":\"ProfileInfo_mainPhoto__uJQHb\",\"contact\":\"ProfileInfo_contact__YlHW6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlocks\":\"MyPosts_postBlocks__3vIf7\",\"posts\":\"MyPosts_posts__vZygL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1i8TE\"};","import React, {useState, useEffect} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                   <b>Status: </b> <span onDoubleClick={activateEditMode}\r\n                          style={{backgroundColor: '#ffe23b'}}>\r\n                        {props.status || \"no status\"}\r\n                    </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input value={status}\r\n                       onBlur={deactivateEditMode}\r\n                       autoFocus={true}\r\n                       onChange={onStatusChange}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\n\r\n\r\nconst Contacts = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Contacts","import React from 'react';\r\nimport Contacts from \"./Contacts\";\r\n\r\n\r\nconst ProfileDataUser = (props) => {\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.goToEditMode}>Edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name: </b>{props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>{props.profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills: </b>{props.profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me: </b>{props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts: </b>{Object.keys(props.profile.contacts).map(key => {\r\n                return <Contacts contactTitle={key}\r\n                                 contactValue={[props.profile.contacts[key]]}\r\n                                 key={key}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileDataUser","import React from 'react';\r\nimport {createField, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css';\r\nimport e from '../../Common/FormsControls/FormsControls.module.css'\r\n\r\n\r\nconst ProfileDataForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            {props.error &&\r\n            <div className={e.formSummaryError}>\r\n                {props.error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>:\r\n                {createField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>:\r\n                {createField(\"\", \"lookingForAJob\", [], Input,\r\n                    {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>:\r\n                {createField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>:\r\n                {createField(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts: </b>{Object.keys(props.profile.contacts).map(key => {\r\n                return (\r\n                    <div key={key} className={s.contact}>\r\n                        <b>{key}:\r\n                            {createField(key, \"contacts.\" + key,\r\n                                [], Input)}</b>\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm","import React, {useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport ProfileDataUser from \"./ProfileDataUser\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = (props,) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    const onSubmit = (formData) => {\r\n        props.saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.mainPhoto}\r\n                     alt={\"avatar\"}\r\n                     src={props.profile.photos.large || userPhoto}/>\r\n                {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                <ProfileStatusWithHooks status={props.status}\r\n                                        updateStatus={props.updateStatus}/>\r\n                <h2>Descriptions</h2>\r\n                {editMode\r\n                    ? <ProfileDataForm profile={props.profile}\r\n                                       onSubmit={onSubmit}\r\n                                       initialValues={props.profile}/>\r\n                    : <ProfileDataUser profile={props.profile}\r\n                                       isOwner={props.isOwner}\r\n                                       goToEditMode={goToEditMode}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://whatsism.com/uploads/posts/2018-05/thumbs/1525374264_7f85e7b.jpeg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n};\r\n\r\nexport default Post","import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={\"Post message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: 'profileAddNewPostForm'})(AddNewPostForm);\r\n\r\nexport default AddNewPostFormRedux","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostFormRedux from \"./AddNewPostForm\";\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    const postsElements = props.posts\r\n        .map(p => <Post key={p.id} message={p.message} likesCount={p.likeCount}/>);\r\n\r\n    const onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postBlocks}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default MyPosts","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={!props.match.params.userId}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {getStatus, getUsersProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUsersProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer);"],"sourceRoot":""}