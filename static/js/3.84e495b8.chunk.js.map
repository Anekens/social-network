{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddNewPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","style","backgroundColor","value","onBlur","updateStatus","autoFocus","onChange","e","currentTarget","ProfileInfo","profile","className","s","descriptionBlock","alt","src","photos","large","aboutMe","contacts","facebook","vk","fullName","Preloader","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPosts","React","memo","postsElements","posts","map","p","likeCount","postBlocks","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.84e495b8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"ProfileInfo_image__1eNxW\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__e50al\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlocks\":\"MyPosts_postBlocks__16lX_\",\"posts\":\"MyPosts_posts__1SWqe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3jJBk\"};","import React, {useState, useEffect} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                    <span onDoubleClick={activateEditMode}\r\n                          style={{backgroundColor: '#ffe23b'}}>\r\n                        {props.status || \"no status\"}\r\n                    </span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input value={status}\r\n                       onBlur={deactivateEditMode}\r\n                       autoFocus={true}\r\n                       onChange={onStatusChange}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img alt={\"avatar\"} src={props.profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={props.status}\r\n                                        updateStatus={props.updateStatus}/>\r\n                <h2>Description</h2>\r\n                <p>{props.profile.aboutMe}</p>\r\n                <p>{props.profile.contacts.facebook}</p>\r\n                <p>{props.profile.contacts.vk}</p>\r\n                <p>{props.profile.fullName}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://whatsism.com/uploads/posts/2018-05/thumbs/1525374264_7f85e7b.jpeg\" alt=\"\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>Like</span>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n};\r\n\r\nexport default Post","import React from 'react'\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength10]}\r\n                       placeholder={\"Post message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddNewPostFormRedux = reduxForm({form: 'profileAddNewPostForm'})(AddNewPostForm);\r\n\r\nexport default AddNewPostFormRedux","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostFormRedux from \"./AddNewPostForm\";\r\n\r\nconst MyPosts = React.memo((props) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likeCount}/>);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return (\r\n        <div className={s.postBlocks}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n\r\nexport default MyPosts","import {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Profile","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {getStatus, getUsersProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUsersProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUsersProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}